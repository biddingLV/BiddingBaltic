// <auto-generated />
using System;
using Bidding.Models.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bidding.Migrations
{
    [DbContext(typeof(BiddingContext))]
    [Migration("20191123163632_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.Auction", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApplyTillDate");

                    b.Property<int>("AuctionCategoryId");

                    b.Property<int>("AuctionCreatorId");

                    b.Property<int>("AuctionFormatId");

                    b.Property<int>("AuctionStatusId");

                    b.Property<int>("AuctionTypeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("StartingPrice");

                    b.HasKey("AuctionId");

                    b.HasIndex("AuctionCategoryId");

                    b.HasIndex("AuctionCreatorId");

                    b.HasIndex("AuctionFormatId");

                    b.HasIndex("AuctionStatusId");

                    b.HasIndex("AuctionTypeId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionCondition", b =>
                {
                    b.Property<int>("AuctionConditionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AuctionConditionId");

                    b.ToTable("AuctionConditions");

                    b.HasData(
                        new
                        {
                            AuctionConditionId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Lietota"
                        },
                        new
                        {
                            AuctionConditionId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Jauna"
                        },
                        new
                        {
                            AuctionConditionId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Apdzīvots"
                        },
                        new
                        {
                            AuctionConditionId = 4,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Neapdzīvots"
                        },
                        new
                        {
                            AuctionConditionId = 5,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Nepieciešams remonts"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionCreator", b =>
                {
                    b.Property<int>("AuctionCreatorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactAddress")
                        .IsRequired();

                    b.Property<string>("ContactEmail")
                        .IsRequired();

                    b.Property<string>("ContactPhone")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("AuctionCreatorId");

                    b.ToTable("AuctionCreators");
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionDetails", b =>
                {
                    b.Property<int>("AuctionDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("AuctionItemId");

                    b.Property<string>("Axis");

                    b.Property<int?>("CadastreNumber");

                    b.Property<int?>("ConditionId");

                    b.Property<string>("Coordinates");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EngineSize");

                    b.Property<string>("Evaluation");

                    b.Property<int?>("FloorCount");

                    b.Property<int?>("FuelTypeId");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50);

                    b.Property<bool?>("InspectionActive");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Make");

                    b.Property<int?>("ManufacturingYear");

                    b.Property<int?>("MeasurementTypeId");

                    b.Property<int?>("MeasurementValue");

                    b.Property<string>("Model");

                    b.Property<int?>("RegionId");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("RoomCount");

                    b.Property<int?>("TransmissionId");

                    b.HasKey("AuctionDetailsId");

                    b.HasIndex("AuctionItemId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("AuctionDetails");
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionFormat", b =>
                {
                    b.Property<int>("AuctionFormatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AuctionFormatId");

                    b.ToTable("AuctionFormats");

                    b.HasData(
                        new
                        {
                            AuctionFormatId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Cenu aptauja"
                        },
                        new
                        {
                            AuctionFormatId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Izsole elektroniski"
                        },
                        new
                        {
                            AuctionFormatId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Izsole klātienē"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionItem", b =>
                {
                    b.Property<int>("AuctionItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuctionId");

                    b.Property<int>("AuctionItemCategoryId");

                    b.Property<int>("AuctionItemTypeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AuctionItemId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("AuctionItemCategoryId");

                    b.HasIndex("AuctionItemTypeId");

                    b.ToTable("AuctionItems");
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionStatus", b =>
                {
                    b.Property<int>("AuctionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AuctionStatusId");

                    b.ToTable("AuctionStatuses");

                    b.HasData(
                        new
                        {
                            AuctionStatusId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Aktīva"
                        },
                        new
                        {
                            AuctionStatusId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Pārtraukta"
                        },
                        new
                        {
                            AuctionStatusId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Beigusies"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Categories.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Transports"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Manta"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Nekustamais īpašums"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Categories.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuctionCategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TypeId");

                    b.HasIndex("AuctionCategoryId");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            AuctionCategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Vieglais transports līdz 3,5t"
                        },
                        new
                        {
                            TypeId = 2,
                            AuctionCategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Traktortehnika"
                        },
                        new
                        {
                            TypeId = 3,
                            AuctionCategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Kravas auto"
                        },
                        new
                        {
                            TypeId = 4,
                            AuctionCategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Mototehnika"
                        },
                        new
                        {
                            TypeId = 5,
                            AuctionCategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Piekabes"
                        },
                        new
                        {
                            TypeId = 6,
                            AuctionCategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Ūdens transports"
                        },
                        new
                        {
                            TypeId = 7,
                            AuctionCategoryId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Cits transports"
                        },
                        new
                        {
                            TypeId = 8,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Biroja tehnika"
                        },
                        new
                        {
                            TypeId = 9,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Sadzīves tehnika"
                        },
                        new
                        {
                            TypeId = 10,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Instrumenti"
                        },
                        new
                        {
                            TypeId = 11,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Iekārtas"
                        },
                        new
                        {
                            TypeId = 12,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Ražošanas materiāli"
                        },
                        new
                        {
                            TypeId = 13,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Veikala produkcija"
                        },
                        new
                        {
                            TypeId = 14,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Uzņēmums"
                        },
                        new
                        {
                            TypeId = 15,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Domeins"
                        },
                        new
                        {
                            TypeId = 16,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Preču zīme"
                        },
                        new
                        {
                            TypeId = 17,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Sadzīves mēbeles"
                        },
                        new
                        {
                            TypeId = 18,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Biroja mēbeles"
                        },
                        new
                        {
                            TypeId = 19,
                            AuctionCategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Cita manta"
                        },
                        new
                        {
                            TypeId = 20,
                            AuctionCategoryId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Dzīvoklis"
                        },
                        new
                        {
                            TypeId = 21,
                            AuctionCategoryId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Māja"
                        },
                        new
                        {
                            TypeId = 22,
                            AuctionCategoryId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Zeme"
                        },
                        new
                        {
                            TypeId = 23,
                            AuctionCategoryId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Telpa"
                        },
                        new
                        {
                            TypeId = 24,
                            AuctionCategoryId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Garāža"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Item.ItemCondition", b =>
                {
                    b.Property<int>("ItemConditionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ItemConditionId");

                    b.ToTable("ItemConditions");

                    b.HasData(
                        new
                        {
                            ItemConditionId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Jauns"
                        },
                        new
                        {
                            ItemConditionId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Lietots"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Property.PropertyMeasurementType", b =>
                {
                    b.Property<int>("PropertyMeasurementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PropertyMeasurementTypeId");

                    b.ToTable("PropertyMeasurementTypes");

                    b.HasData(
                        new
                        {
                            PropertyMeasurementTypeId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "m2"
                        },
                        new
                        {
                            PropertyMeasurementTypeId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "a"
                        },
                        new
                        {
                            PropertyMeasurementTypeId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "ha"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Shared.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("PermissionsInRole");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            ConcurrencyStamp = "541c3866-0873-4c60-a266-d98487654a03",
                            Name = "BasicUser",
                            NormalizedName = "BASICUSER"
                        },
                        new
                        {
                            Id = 200,
                            ConcurrencyStamp = "e3d496d9-3b53-47fc-af90-f40b96c10fcb",
                            Name = "AuctionCreator",
                            NormalizedName = "AUCTIONCREATOR"
                        },
                        new
                        {
                            Id = 300,
                            ConcurrencyStamp = "61fee96d-77e7-4755-9c3b-d5a12824b5c1",
                            Name = "PageAdministrator",
                            NormalizedName = "PAGEADMINISTRATOR"
                        },
                        new
                        {
                            Id = 400,
                            ConcurrencyStamp = "6320899e-79af-44ec-bef3-a43481be3aeb",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Shared.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdentityId");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Shared.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Jelgava"
                        },
                        new
                        {
                            RegionId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Ogre"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Subscribe.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("Estate");

                    b.Property<bool>("Items");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(100);

                    b.Property<bool>("Vehicles");

                    b.HasKey("Id");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Vehicle.VehicleFuelType", b =>
                {
                    b.Property<int>("VehicleFuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("VehicleFuelTypeId");

                    b.ToTable("VehicleFuelTypes");

                    b.HasData(
                        new
                        {
                            VehicleFuelTypeId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Benzīns"
                        },
                        new
                        {
                            VehicleFuelTypeId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Dīzelis"
                        },
                        new
                        {
                            VehicleFuelTypeId = 3,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Benzīns/Naftas gāze"
                        },
                        new
                        {
                            VehicleFuelTypeId = 4,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Elektroniskais"
                        },
                        new
                        {
                            VehicleFuelTypeId = 5,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Hibrīds"
                        });
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Vehicle.VehicleTransmission", b =>
                {
                    b.Property<int>("VehicleTransmissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("VehicleTransmissionId");

                    b.ToTable("VehicleTransmissions");

                    b.HasData(
                        new
                        {
                            VehicleTransmissionId = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Automatiskā"
                        },
                        new
                        {
                            VehicleTransmissionId = 2,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            LastUpdatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedBy = 1,
                            Name = "Mehāniskā"
                        });
                });

            modelBuilder.Entity("DataLayer.ExtraAuthClasses.ModulesForUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AllowedPaidForModules");

                    b.HasKey("UserId");

                    b.ToTable("ModulesForUsers");
                });

            modelBuilder.Entity("DataLayer.ExtraAuthClasses.RoleToPermissions", b =>
                {
                    b.Property<string>("RoleName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("_permissionsInRole")
                        .IsRequired()
                        .HasColumnName("PermissionsInRole");

                    b.HasKey("RoleName");

                    b.ToTable("RolesToPermissions");

                    b.HasData(
                        new
                        {
                            RoleName = "BasicUser",
                            Description = "Basic user",
                            _permissionsInRole = "BasicUser"
                        },
                        new
                        {
                            RoleName = "AuctionCreator",
                            Description = "Can add, edit or delete own auctions",
                            _permissionsInRole = "AccessAdminPanel,CreateAuction,ChangeOwnAuction,RemoveOwnAuction"
                        },
                        new
                        {
                            RoleName = "PageAdministrator",
                            Description = "Can add, edit or delete auctions and users",
                            _permissionsInRole = "AccessAdminPanel,CreateAuction,ChangeAuction,RemoveAuction"
                        },
                        new
                        {
                            RoleName = "SuperAdministrator",
                            Description = "Can do all possible actions",
                            _permissionsInRole = "AccessAll"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.Auction", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Categories.Category", "Category")
                        .WithMany("Auctions")
                        .HasForeignKey("AuctionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Auctions.AuctionCreator", "AuctionCreator")
                        .WithMany("Auctions")
                        .HasForeignKey("AuctionCreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Auctions.AuctionFormat", "AuctionFormat")
                        .WithMany("Auctions")
                        .HasForeignKey("AuctionFormatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Auctions.AuctionStatus", "AuctionStatus")
                        .WithMany("Auctions")
                        .HasForeignKey("AuctionStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Categories.Type", "Type")
                        .WithMany("Auctions")
                        .HasForeignKey("AuctionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionDetails", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Auctions.AuctionItem", "AuctionItem")
                        .WithMany()
                        .HasForeignKey("AuctionItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Item.ItemCondition", "ItemCondition")
                        .WithMany("AuctionDetails")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Vehicle.VehicleFuelType", "VehicleFuelType")
                        .WithMany("AuctionDetails")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Property.PropertyMeasurementType", "PropertyMeasurementType")
                        .WithMany("AuctionDetails")
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Shared.Region", "Region")
                        .WithMany("AuctionDetails")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Vehicle.VehicleTransmission", "VehicleTransmission")
                        .WithMany("AuctionDetails")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Auctions.AuctionItem", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Auctions.Auction", "Auction")
                        .WithMany("AuctionItems")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Categories.Category", "Category")
                        .WithMany("AuctionItems")
                        .HasForeignKey("AuctionItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Categories.Type", "Type")
                        .WithMany("AuctionItems")
                        .HasForeignKey("AuctionItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Bidding.Models.DatabaseModels.Categories.Type", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Categories.Category", "Category")
                        .WithMany("Types")
                        .HasForeignKey("AuctionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Shared.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Shared.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Shared.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Shared.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bidding.Models.DatabaseModels.Shared.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Bidding.Models.DatabaseModels.Shared.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
